# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1IbTYkYQDmOiHzFjXmCSVbu_3ONZCbDZz
"""

import cv2
import numpy as np
from google.colab.patches import cv2_imshow

# Download YOLOv3 files in Colab
!wget -q https://pjreddie.com/media/files/yolov3.weights -O yolov3.weights
!wget -q https://raw.githubusercontent.com/pjreddie/darknet/master/cfg/yolov3.cfg -O yolov3.cfg
!wget -q https://raw.githubusercontent.com/pjreddie/darknet/master/data/coco.names -O coco.names

# Load class labels
with open("coco.names", "r") as f:
    classes = [line.strip() for line in f.readlines()]

# Load YOLO model
net = cv2.dnn.readNet("yolov3.weights", "yolov3.cfg")
layer_names = net.getLayerNames()

# Fix for the IndexError: Convert net.getUnconnectedOutLayers() to integers directly
output_layers = [layer_names[i - 1] for i in net.getUnconnectedOutLayers().flatten()]

# Load your image (You can upload an image or link it)
image = cv2.imread("room3.png")  # Replace with your image file name
height, width, channels = image.shape

# Prepare the image for YOLO (blob)
blob = cv2.dnn.blobFromImage(image, 0.00392, (416, 416), (0, 0, 0), True, crop=False)
net.setInput(blob)

# Run forward pass through the network
outs = net.forward(output_layers)

# Initialize parameters
boxes = []
confidences = []
class_ids = []

# Loop over each detection from each output layer
for out in outs:
    for detection in out:
        scores = detection[5:]
        class_id = np.argmax(scores)
        confidence = scores[class_id]

        # Filter out weak predictions
        if confidence > 0.5:
            center_x = int(detection[0] * width)
            center_y = int(detection[1] * height)
            w = int(detection[2] * width)
            h = int(detection[3] * height)

            # Bounding box coordinates
            x = int(center_x - w / 2)
            y = int(center_y - h / 2)

            boxes.append([x, y, w, h])
            confidences.append(float(confidence))
            class_ids.append(class_id)

# Perform non-maxima suppression to remove overlapping boxes
indexes = cv2.dnn.NMSBoxes(boxes, confidences, 0.5, 0.4)

# Draw bounding boxes and class names on the image
for i in indexes.flatten():
    x, y, w, h = boxes[i]
    label = str(classes[class_ids[i]])
    color = (0, 255, 0)  # Green bounding box
    cv2.rectangle(image, (x, y), (x + w, y + h), color, 2)
    cv2.putText(image, label, (x, y - 10), cv2.FONT_HERSHEY_SIMPLEX, 1, color, 2)

# Display the output image with boxes and class names
cv2_imshow(image)
cv2.waitKey(0)
cv2.destroyAllWindows()